type StrictHandlerFunc func(ctx *gin.Context, args interface{}) interface{}

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
    return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
    ssi StrictServerInterface
    middlewares []StrictMiddlewareFunc
}

{{range .}}
    {{$opid := .OperationId}}
    // {{$opid}} operation middleware
    func (sh *strictHandler) {{.OperationId}}(ctx *gin.Context{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params {{.OperationId}}Params{{end}}) {
        var request {{$opid | ucFirst}}RequestObject

        {{range .PathParams -}}
            {{$varName := .GoVariableName -}}
            request.{{$varName | ucFirst}} = {{$varName}}
        {{end -}}

        {{if .RequiresParamObject -}}
            request.Params = params
        {{end -}}

        {{ if .HasMaskedRequestContentTypes -}}
            request.ContentType = ctx.ContentType()
        {{end -}}

        {{$multipleBodies := gt (len .Bodies) 1 -}}
        {{range .Bodies -}}
            {{if $multipleBodies}}if strings.HasPrefix(ctx.GetHeader("Content-Type"), "{{.ContentType}}") { {{end}}
                {{if eq .NameTag "JSON" -}}
                    var body {{$opid}}{{.NameTag}}RequestBody
                    if err := ctx.Bind(&body); err != nil {
                        ctx.Error(err)
                        return
                    }
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                {{else if eq .NameTag "Formdata" -}}
                    if err := ctx.Request.ParseForm(); err != nil {
                        ctx.Error(err)
                        return
                    }
                    var body {{$opid}}{{.NameTag}}RequestBody
                    if err := runtime.BindForm(&body, ctx.Request.Form, nil, nil); err != nil {
                        ctx.Error(err)
                        return
                    }
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                {{else if eq .NameTag "Multipart" -}}
                    if reader, err := ctx.Request.MultipartReader(); err == nil {
                        request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = reader
                    } else {
                        ctx.Error(err)
                        return
                    }
                {{else if eq .NameTag "Text" -}}
                    data, err := ioutil.ReadAll(ctx.Request.Body)
                    if err != nil {
                        ctx.Error(err)
                        return
                    }
                    body := {{$opid}}{{.NameTag}}RequestBody(data)
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                {{else -}}
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = ctx.Request.Body
                {{end}}{{/* if eq .NameTag "JSON" */ -}}
            {{if $multipleBodies}}}{{end}}
        {{end}}{{/* range .Bodies */}}

        handler := func(ctx *gin.Context, request interface{}) interface{}{
            return sh.ssi.{{.OperationId}}(ctx, request.({{$opid | ucFirst}}RequestObject))
        }
        for _, middleware := range sh.middlewares {
            handler = middleware(handler, "{{.OperationId}}")
        }

        response := handler(ctx, request)

        switch v := response.(type) {
            {{range .Responses -}}
                {{$statusCode := .StatusCode -}}
                {{$fixedStatusCode := .HasFixedStatusCode -}}
                {{$headers := .Headers -}}
                {{range .Contents -}}
                    case {{$opid}}{{$statusCode}}{{.NameTagOrContentType}}Response:
                    {{range $headers -}}
                        ctx.Header("{{.Name}}", fmt.Sprint(v.Headers.{{.GoName}}))
                    {{end -}}
                    {{if eq .NameTag "JSON" -}}
                        ctx.JSON({{if $fixedStatusCode}}{{$statusCode}}{{else}}v.StatusCode{{end}}, v)
                    {{else if eq .NameTag "Text" -}}
                        ctx.Data({{if $fixedStatusCode}}{{$statusCode}}{{else}}v.StatusCode{{end}}, "{{.ContentType}}", []byte(v))
                    {{else if eq .NameTag "Formdata" -}}
                        if form, err := runtime.MarshalForm(v, nil); err != nil {
                            ctx.Error(err)
                        } else {
                            ctx.Data({{if $fixedStatusCode}}{{$statusCode}}{{else}}v.StatusCode{{end}}, "{{.ContentType}}", []byte(form.Encode()))
                        }
                    {{else if eq .NameTag "Multipart" -}}
                        writer := multipart.NewWriter(ctx.Writer)
                        ctx.Writer.Header().Set("Content-Type", writer.FormDataContentType())
                        defer writer.Close()
                        if err := v(writer); err != nil {
                            ctx.Error(err)
                        }
                    {{else -}}
                        if closer, ok := v.Body.(io.ReadCloser); ok {
                            defer closer.Close()
                        }
                        ctx.DataFromReader({{if $fixedStatusCode}}{{$statusCode}}{{else}}v.StatusCode{{end}}, v.ContentLength, {{if .HasFixedContentType }}"{{.ContentType}}"{{else}}v.ContentType{{end}}, v.Body, nil)
                    {{end}}{{/* if eq .NameTag "JSON" */ -}}
                {{end}}{{/* range .Contents */ -}}
                {{if eq 0 (len .Contents) -}}
                    case {{$opid}}{{$statusCode}}Response:
                    {{range $headers -}}
                        ctx.Header("{{.Name}}", fmt.Sprint(v.Headers.{{.GoName}}))
                    {{end -}}
                    ctx.Status({{if $fixedStatusCode}}{{$statusCode}}{{else}}v.StatusCode{{end}})
                {{end}}{{/* if eq 0 (len .Contents) */ -}}
            {{end}}{{/* range .Responses */ -}}
            case error:
                ctx.Error(v)
            case nil:
            default:
                ctx.Error(fmt.Errorf("Unexpected response type: %T", v))
        }
    }
{{end}}
